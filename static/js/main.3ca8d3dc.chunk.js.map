{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","GetTodo","localStorage","getItem","parseTodo","JSON","parse","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","toDoSave","useRecoilValue","setToDos","useSetRecoilState","useForm","register","handleSubmit","setValue","setItem","stringify","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","DELETE","targetIndex2","todo","ToDoList","useRecoilState","setCategory","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.3ca8d3dc.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\n//로컬 스토리지\r\nconst GetTodo = localStorage.getItem(\"todos\");\r\nconst parseTodo = JSON.parse(GetTodo as string);\r\n\r\nexport enum Categories { //enumerable(열거형) : 이름이 있는 상수들의 집합을 정의\r\n  // \"TO_DO\",\r\n  // \"DOING\",\r\n  // \"DONE\",\r\n  \"TO_DO\" = \"TO_DO\",//타입을 string으로 설정\r\n  \"DOING\" = \"DOING\",\r\n  \"DONE\" = \"DONE\",\r\n  \"DELETE\" = \"DELETE\",\r\n}\r\n\r\nexport interface IToDo {\r\n    text: string;\r\n    id: number;\r\n    category: Categories;\r\n}\r\n\r\nexport const categoryState = atom<Categories>({\r\n    key: \"category\",\r\n    default: Categories.TO_DO,\r\n});\r\n// recoil의 atom함수\r\nexport const toDoState = atom<IToDo[]>({ // IToDo객체로 이루어진 배열임을 나타냄\r\n    key:\"toDo\",\r\n    default: GetTodo !== null ? parseTodo : [],\r\n//selecter사용전에는 모든 todo(카테고리상관X)가 같은 statd에 저장되고 있음\r\n})\r\n\r\n\r\n\r\nexport const toDoSelector = selector({\r\n    key: \"toDoSelector\",\r\n    get: ({ get }) => {//???\r\n      const toDos = get(toDoState);\r\n      const category = get(categoryState);\r\n    //   return [ //(방법1)배열을 담은 배열을 반환하는 것\r\n    //     toDos.filter((toDo) => toDo.category === \"TO_DO\"),//todo의 카테고리가 \"TO_DO\"와 같으면 남아있다.  \r\n    //     toDos.filter((toDo) => toDo.category === \"DOING\"),\r\n    //     toDos.filter((toDo) => toDo.category === \"DONE\"),\r\n    //   ];\r\n\r\n    //   //(방법2)배열을 담은 배열을 반환하는 것\r\n    //     if(category===\"TO_DO\") return toDos.filter((toDo) => toDo.category === \"TO_DO\"),//todo의 카테고리가 \"TO_DO\"와 같으면 남아있다.  \r\n    //     if(category===\"DOING\") returntoDos.filter((toDo) => toDo.category === \"DOING\"),\r\n    //     if(category===\"DONE\") returntoDos.filter((toDo) => toDo.category === \"DONE\"),\r\n    //  \r\n\r\n      return toDos.filter((toDo) => toDo.category === category); //카테고리에 따라 하나의 배열만 반환\r\n    },\r\n  });","import { useForm } from \"react-hook-form\";\r\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\r\nimport { toDoState, categoryState } from \"../atoms\"; //리팩토링하면서 추가해준것\r\n\r\ninterface IForm {\r\n    toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n    const toDoSave = useRecoilValue(toDoState);//로컬 스토리지\r\n    // const [toDos, setToDos] = useRecoilState(toDoState);\r\n    const setToDos = useSetRecoilState(toDoState);\r\n    const category = useRecoilValue(categoryState);//카테고리값을 기억하기 위해\r\n    const { register, handleSubmit, setValue } = useForm<IForm>();\r\n    const handleValid = ({ toDo }: IForm) => { \r\n        setToDos((oldToDos) => [{ text: toDo, id: Date.now(), category}, ...oldToDos,]); //기존값을 oldToDos으로 지정\r\n        setValue(\"toDo\", \"\");\r\n};\r\n// console.log(toDos);\r\n        localStorage.setItem(\"todos\", JSON.stringify(toDoSave));//로컬 스토리지\r\nreturn(\r\n    <div>\r\n        <form onSubmit={handleSubmit(handleValid)}>\r\n            <input{...register(\"toDo\", {required: \"Please write a To Do\",})}\r\n            placeholder=\"Write a to do\"/>\r\n            \r\n            <button>Add</button>\r\n        </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;","import React from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { IToDo, toDoState, Categories } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState); //atom을 수정가능하게 만든것\r\n  // const onClick = (newCategory: IToDo[\"category\"]) => {\r\n  //   console.log(\"i wanna to\", newCategory);\r\n    // console.log(\"i wanna to\", event.currentTarget.name);\r\n  // };\r\n  const onClick = (event:React.MouseEvent<HTMLButtonElement>) => {\r\n  //  event.currentTarget.name\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    // console.log(\"i wanna to\", event.currentTarget.name);\r\n    setToDos((oldToDos) => { //toDo의 경로찾기(index)\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      // const oldToDo = oldToDos[targetIndex];\r\n      const newToDo = { text, id, category: name as any }; //category: name 버튼이 준 카테고리받기\r\n      // console.log(targetIndex);//toDo의 경로찾기(index확인 : 배열의 0,1,2,3...)\r\n      // console.log(oldToDo, newToDo);//카테고리확인, 바뀌진않음(oldToDo, newToDo 확인)\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n  //삭제기능\r\n  const DeleteClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setToDos((oldToDos) => {\r\n      const targetIndex2 = oldToDos.findIndex((todo) => todo.id === id);\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex2),\r\n        ...oldToDos.slice(targetIndex2 + 1),\r\n      ];\r\n    });\r\n  };  \r\n  \r\n  return (\r\n    <li>\r\n      {/* &&뒤는 조건이 충족되면 실행되는 값이다 */}\r\n      <span>{text}</span>\r\n      {category !== Categories.DOING && (\r\n        <button name={Categories.DOING} onClick={onClick}>\r\n          Doing\r\n        </button>\r\n      )}\r\n      {category !== Categories.TO_DO && (\r\n        <button name={Categories.TO_DO} onClick={onClick}>\r\n          To Do\r\n        </button>\r\n      )}\r\n      {category !== Categories.DONE && (\r\n        <button name={Categories.DONE} onClick={onClick}>\r\n          Done\r\n        </button>\r\n        //<button onClick={() => onClick(\"Done\")}>Done</button>\r\n      )}\r\n        <button name={Categories.DELETE} onClick={DeleteClick}>\r\n          Delete\r\n        </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;","\r\nimport React from \"react\";\r\n// import { toDoSelector, toDoState } from \"../atoms\";\r\nimport { useRecoilValue, useRecoilState } from \"recoil\";\r\nimport { categoryState, toDoSelector, Categories } from \"../atoms\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoList() {\r\n    // const toDos = useRecoilValue(toDoState);\r\n    \r\n    // const selectorOutput = useRecoilValue(toDoSelector);\r\n        //!!useRecoilValue(toDoSelector)의 return값은 배열임\r\n    \r\n    // console.log(toDos);\r\n    // console.log(selectorOutput);\r\n    \r\n    // const [toDo, doing, done] = useRecoilValue(toDoSelector);//useRecoilValue(toDoSelector)의 3개의배열을 꺼내기 위한 작업\r\n    const toDos = useRecoilValue(toDoSelector);\r\n    const [category, setCategory] = useRecoilState(categoryState);\r\n    const onInput = (event:React.FormEvent<HTMLSelectElement>) => {\r\n        // console.log(event.currentTarget.value) //옵션을 셀렉했을때 옵션value을 받는지 확인\r\n        setCategory(event.currentTarget.value as any); //input이 변할때 setCategory호출\r\n        // console.log(category);//옵션을 셀렉했을때 카테고리를 받는지 확인(vlaue={category}필요)\r\n    };\r\n    // console.log(toDos);\r\nreturn(\r\n    <div>\r\n        <h1> ToDo List</h1>\r\n        <hr />\r\n        {/* submit할거면 <Form> 필요 */}\r\n            <select value={category} onInput={onInput}>\r\n                <option value={Categories.TO_DO}>ToDo</option>\r\n                <option value={Categories.DOING}>Doing</option>\r\n                <option value={Categories.DONE}>Done</option>\r\n            </select>\r\n        <CreateToDo />\r\n        {/* {category ===\"TO_DO\" && toDo.map((aToDo) => <ToDo key={aToDo.id} {...aToDo} />)}\r\n        {category ===\"DOING\" && doing.map((aToDo) => <ToDo key={aToDo.id} {...aToDo} />)}\r\n        {category ===\"DONE\" && done.map((aToDo) => <ToDo key={aToDo.id} {...aToDo} />)} */}\r\n        \r\n        {toDos?.map((toDo) => (<ToDo key={toDo.id} {...toDo} />))}\r\n\r\n\r\n\r\n    {/*카테고리state가 없을때 사용한 것들  */}\r\n        {/* <h2>ToDo</h2>\r\n        <ul>\r\n            {toDo.map((toDo) => (<ToDo key={toDo.id} {...toDo} />))} */}\r\n                    {/* {toDos.map((toDo) => (<ToDo key={toDo.id} {...toDo} />))} */}{/* toDo는 모든 props를 받는 상태(3개 : To_Do, DOING, DONE) */}\r\n                    {/* {toDos.map((toDo) => (<ToDo text={toDo.text} category={toDo.category} id={toDo.id} />))} */}\r\n                    {/* ToDo와 toDoState은 둘다 IToDo타입이라 prop가 같음 / 위두식은 같은식임 */}\r\n        {/* </ul>\r\n        <hr />\r\n        <h2>Doing</h2>\r\n        <ul>\r\n            {doing.map((toDo) => (<ToDo key={toDo.id} {...toDo} />))}\r\n        </ul>\r\n        <hr />\r\n        <h2>Done</h2>\r\n        <ul>\r\n            {done.map((toDo) => (<ToDo key={toDo.id} {...toDo} />))}\r\n        </ul>   */}\r\n    </div>\r\n);\r\n}\r\n\r\nexport default ToDoList;","import { createGlobalStyle } from \"styled-components\";\r\nimport ToDoList from \"./components/ToDoList\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n*{\r\n  box-sizing: border-box;\r\n}\r\na{\r\n  text-decoration: none;\r\n  color:inherit;\r\n}\r\nbody{\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  background-color: ${(props) => props.theme.bgColor};\r\n  color:${(props) => props.theme.textColor};\r\n  font-weight: 700;\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <ToDoList />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\n\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\"\r\n\r\nimport { darkTheme } from \"./theme\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"white\",\r\n  accentColor: \"#9c88ff\",\r\n  cardBgColor: \"transparent\",\r\n};"],"sourceRoot":""}